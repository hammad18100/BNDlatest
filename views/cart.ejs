<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>Shopping Cart - BND</title>
  <link href="https://fonts.googleapis.com/css2?family=Anton&display=swap" rel="stylesheet">
  <link href="https://fonts.googleapis.com/css2?family=Dancing+Script:wght@700&display=swap" rel="stylesheet">
  <link href="https://fonts.googleapis.com/css2?family=Playfair+Display:wght@700&display=swap" rel="stylesheet">
  <link rel="stylesheet" href="/css/style.css">
</head>
<body class="cart-page">
  <header class="main-header">
    <!-- Mobile Navigation Toggle -->
    <button class="mobile-nav-toggle" id="mobileNavToggle" aria-label="Open mobile menu" aria-controls="mobileNav" aria-expanded="false">
      <span class="line"></span>
      <span class="line"></span>
      <span class="line"></span>
    </button>

    <div class="logo-container">
      <a href="/">
        <img src="/images/BND logo.png" alt="BND Logo">
      </a>
    </div>

    <!-- Mobile Cart Icon -->
    <div class="mobile-cart-container">
      <button class="mobile-cart-icon" id="mobileCartIcon" type="button" aria-label="Open shopping cart">
        <svg xmlns="http://www.w3.org/2000/svg" fill="none" stroke="currentColor" width="20" height="20" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 3h2l.4 2M7 13h10l4-8H5.4m0 0L7 13m0 0l-2.5 5M7 13l2.5 5m6-5v6a2 2 0 01-2 2H9a2 2 0 01-2-2v-6m6 0V9a2 2 0 00-2-2H9a2 2 0 00-2 2v4.01"></path>
        </svg>
        <span class="mobile-cart-count" id="mobileCartCount">0</span>
      </button>
    </div>
  </header>

  <!-- Mobile Navigation Menu -->
  <div class="mobile-nav" id="mobileNav" role="menu" aria-label="Mobile navigation">
    <nav class="mobile-nav-menu">
      <a href="/" class="mobile-nav-link">Home</a>
      <a href="/products" class="mobile-nav-link">Collections</a>
      <a href="/about" class="mobile-nav-link">About Us</a>
    </nav>
    <button class="mobile-nav-close" id="mobileNavClose" aria-label="Close mobile menu">
      &times;
    </button>
  </div>

  <!-- Mobile Cart Page Content -->
  <main class="mobile-cart-page">
    <div class="cart-page-header">
      <h1>Shopping Cart</h1>
      <button class="back-btn" onclick="window.history.back()">Back</button>
    </div>
    
    <!-- Success message for added items -->
    <div id="cartSuccessMessage" class="cart-success-message" style="display: none;">
      <span>Item added to cart successfully!</span>
    </div>
    
    <!-- Debug info (remove in production) -->
    <div id="debugInfo" style="background: #333; color: #fff; padding: 10px; margin: 10px 0; border-radius: 5px; font-size: 12px;">
      <div>Cart Items: <span id="debugItemCount">0</span></div>
      <div>Cart Total: <span id="debugCartTotal">RM 0.00</span></div>
      <button onclick="testCartButtons()" style="background: #666; color: #fff; border: none; padding: 5px 10px; border-radius: 3px; margin-top: 5px;">Test Buttons</button>
    </div>

    <div class="cart-page-content">
      <div class="cart-items-container" id="cartItemsContainer">
        <!-- Cart items will be dynamically added here -->
      </div>

      <div class="cart-page-footer">
        <div class="cart-total-section">
          <div class="cart-total">
            <span>Total:</span>
            <span id="cartPageTotal">RM 0.00</span>
          </div>
        </div>
        <button class="checkout-btn" id="cartPageCheckoutBtn" onclick="window.location.href='/checkout'">Checkout</button>
      </div>
    </div>
  </main>

  <script src="/js/main.js"></script>
  <script>
    // Mobile cart page specific functionality
    document.addEventListener('DOMContentLoaded', () => {
      console.log('Mobile cart page loaded');
      
      // Initialize cart if not already done
      if (!window.cart) {
        console.log('Creating new cart instance');
        window.cart = new Cart();
      }
      
      // Ensure cart is properly loaded from localStorage
      const savedCart = JSON.parse(localStorage.getItem('cart')) || [];
      window.cart.items = savedCart;
      console.log('Cart items loaded:', window.cart.items);
      window.cart.updateCartCount();
      
      // Render the cart page
      renderMobileCartPage();
      
      // Show success message if redirected from product page
      const urlParams = new URLSearchParams(window.location.search);
      if (urlParams.get('added') === 'true') {
        showCartSuccessMessage();
      }
      
      // Test cart functionality
      console.log('Cart instance available:', !!window.cart);
      console.log('Cart items count:', window.cart.items.length);
      console.log('Cart methods available:', {
        updateQuantity: typeof window.cart.updateQuantity,
        saveCart: typeof window.cart.saveCart,
        updateCartCount: typeof window.cart.updateCartCount
      });
    });

    function showCartSuccessMessage() {
      const successMessage = document.getElementById('cartSuccessMessage');
      if (successMessage) {
        successMessage.style.display = 'block';
        setTimeout(() => {
          successMessage.style.display = 'none';
        }, 3000);
      }
    }

    function renderMobileCartPage() {
      const cartItemsContainer = document.getElementById('cartItemsContainer');
      const cartPageTotal = document.getElementById('cartPageTotal');
      const cartPageCheckoutBtn = document.getElementById('cartPageCheckoutBtn');

      if (!cartItemsContainer) return;

      if (window.cart.items.length === 0) {
        cartItemsContainer.innerHTML = `
          <div class="empty-cart">
            <h2>Your cart is empty</h2>
            <p>Add some items to get started!</p>
            <a href="/products" class="shop-now-btn">Shop Now</a>
          </div>
        `;
        if (cartPageTotal) cartPageTotal.textContent = 'RM 0.00';
        if (cartPageCheckoutBtn) cartPageCheckoutBtn.disabled = true;
        return;
      }

      cartItemsContainer.innerHTML = window.cart.items.map((item, index) => `
        <div class="cart-page-item" data-item-index="${index}">
          <div class="cart-page-item-details">
            <div class="cart-page-item-name">${item.name}</div>
            <div class="cart-page-item-size">Size: ${item.size}</div>
            <div class="cart-page-item-price">RM ${item.price.toFixed(2)}</div>
          </div>
          <div class="cart-page-item-quantity">
            <button class="quantity-btn minus-btn" data-index="${index}">-</button>
            <span class="quantity-display">${item.quantity}</span>
            <button class="quantity-btn plus-btn" data-index="${index}">+</button>
          </div>
          <button class="remove-item" data-index="${index}">&times;</button>
        </div>
      `).join('');

      // Add event listeners to the buttons
      setTimeout(() => {
        addMobileCartEventListeners();
      }, 100);

      if (cartPageTotal) cartPageTotal.textContent = `RM ${window.cart.getTotal().toFixed(2)}`;
      if (cartPageCheckoutBtn) cartPageCheckoutBtn.disabled = false;
      
      // Update debug info
      const debugItemCount = document.getElementById('debugItemCount');
      const debugCartTotal = document.getElementById('debugCartTotal');
      
      if (debugItemCount) {
        debugItemCount.textContent = window.cart.items.length;
      }
      
      if (debugCartTotal) {
        debugCartTotal.textContent = `RM ${window.cart.getTotal().toFixed(2)}`;
      }
    }

    function updateCartItemQuantity(index, newQuantity) {
      console.log('updateCartItemQuantity called:', { index, newQuantity, cart: !!window.cart });
      
      if (window.cart) {
        // Ensure newQuantity is valid and only increment by 1
        const currentQuantity = window.cart.items[index].quantity;
        console.log('Current quantity:', currentQuantity);
        
        // For incrementing, ensure it only goes up by 1
        if (newQuantity > currentQuantity && newQuantity > currentQuantity + 1) {
          newQuantity = currentQuantity + 1;
        }
        
        // For decrementing, ensure it only goes down by 1
        if (newQuantity < currentQuantity && newQuantity < currentQuantity - 1) {
          newQuantity = currentQuantity - 1;
        }
        
        // Don't allow quantity less than 1
        if (newQuantity < 1) {
          newQuantity = 1;
        }
        
        console.log('Final newQuantity:', newQuantity);
        window.cart.updateQuantity(index, newQuantity);
        renderMobileCartPage();
        // Update cart count in header
        window.cart.updateCartCount();
      } else {
        console.error('Cart not available!');
      }
    }

    function removeCartItem(index) {
      if (window.cart) {
        window.cart.removeItem(index);
        renderMobileCartPage();
        // Update cart count in header
        window.cart.updateCartCount();
      }
    }

    function addMobileCartEventListeners() {
      console.log('Adding mobile cart event listeners');
      
      // Remove existing event listeners to prevent duplicates
      const existingButtons = document.querySelectorAll('.quantity-btn, .remove-item');
      existingButtons.forEach(button => {
        button.replaceWith(button.cloneNode(true));
      });
      
      // Add event listeners for minus buttons
      const minusButtons = document.querySelectorAll('.minus-btn');
      console.log('Found minus buttons:', minusButtons.length);
      minusButtons.forEach(button => {
        button.addEventListener('click', function(e) {
          e.preventDefault();
          e.stopPropagation();
          const index = parseInt(this.dataset.index);
          console.log('Minus button clicked for index:', index);
          
          if (window.cart && window.cart.items && window.cart.items[index]) {
            const currentQuantity = window.cart.items[index].quantity;
            const newQuantity = Math.max(1, currentQuantity - 1);
            console.log('Updating quantity from', currentQuantity, 'to', newQuantity);
            
            // Directly update the cart item
            window.cart.items[index].quantity = newQuantity;
            window.cart.saveCart();
            window.cart.updateCartCount();
            renderMobileCartPage();
          } else {
            console.error('Cart or item not available for index:', index);
          }
        });
      });

      // Add event listeners for plus buttons
      const plusButtons = document.querySelectorAll('.plus-btn');
      console.log('Found plus buttons:', plusButtons.length);
      plusButtons.forEach(button => {
        button.addEventListener('click', function(e) {
          e.preventDefault();
          e.stopPropagation();
          const index = parseInt(this.dataset.index);
          console.log('Plus button clicked for index:', index);
          
          if (window.cart && window.cart.items && window.cart.items[index]) {
            const currentQuantity = window.cart.items[index].quantity;
            const newQuantity = currentQuantity + 1;
            console.log('Updating quantity from', currentQuantity, 'to', newQuantity);
            
            // Directly update the cart item
            window.cart.items[index].quantity = newQuantity;
            window.cart.saveCart();
            window.cart.updateCartCount();
            renderMobileCartPage();
          } else {
            console.error('Cart or item not available for index:', index);
          }
        });
      });

      // Add event listeners for remove buttons
      const removeButtons = document.querySelectorAll('.remove-item');
      console.log('Found remove buttons:', removeButtons.length);
      removeButtons.forEach(button => {
        button.addEventListener('click', function(e) {
          e.preventDefault();
          e.stopPropagation();
          const index = parseInt(this.dataset.index);
          console.log('Remove button clicked for index:', index);
          
          if (window.cart && window.cart.items) {
            window.cart.removeItem(index);
            renderMobileCartPage();
            window.cart.updateCartCount();
          } else {
            console.error('Cart not available for removal');
          }
        });
      });
    }

    function testCartButtons() {
      console.log('Testing cart buttons...');
      console.log('Cart instance:', window.cart);
      console.log('Cart items:', window.cart?.items);
      
      // Update debug info
      const debugItemCount = document.getElementById('debugItemCount');
      const debugCartTotal = document.getElementById('debugCartTotal');
      
      if (debugItemCount && window.cart) {
        debugItemCount.textContent = window.cart.items.length;
      }
      
      if (debugCartTotal && window.cart) {
        debugCartTotal.textContent = `RM ${window.cart.getTotal().toFixed(2)}`;
      }
      
      // Test if buttons exist
      const minusButtons = document.querySelectorAll('.minus-btn');
      const plusButtons = document.querySelectorAll('.plus-btn');
      const removeButtons = document.querySelectorAll('.remove-item');
      
      console.log('Found buttons:', {
        minus: minusButtons.length,
        plus: plusButtons.length,
        remove: removeButtons.length
      });
      
      alert(`Found ${minusButtons.length} minus buttons, ${plusButtons.length} plus buttons, ${removeButtons.length} remove buttons`);
    }
  </script>
</body>
</html> 